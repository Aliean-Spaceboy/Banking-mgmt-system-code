package com.example.banking.security;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;

@Configuration
public class WebSecurityConfig {

    // Define in-memory users with roles
    @Bean
    public InMemoryUserDetailsManager userDetailsService() {
        UserDetails adminUser = User.withUsername("admin")
                .password(passwordEncoder().encode("adminPassword"))
                .roles("ADMIN")
                .build();

        UserDetails regularUser = User.withUsername("user")
                .password(passwordEncoder().encode("userPassword"))
                .roles("USER")
                .build();

        return new InMemoryUserDetailsManager(adminUser, regularUser);
    }

    // Password encoder bean
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    // Security filter chain configuration
    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http.csrf(AbstractHttpConfigurer::disable)
            .cors(withDefaults()) // Uses default CORS settings
            .authorizeHttpRequests(auth -> auth
                .requestMatchers("/api/accounts/", "/api/users/", "/api/users/login", "/api/users/register").permitAll() // Public endpoints
                .requestMatchers("/api/accounts/**").hasRole("USER")  // Requires USER role
                .requestMatchers("/api/admin/**").hasRole("ADMIN")  // Requires ADMIN role
                .anyRequest().authenticated()  // All other requests require authentication
            )
            .httpBasic(withDefaults()); // Enable HTTP Basic Authentication

        return http.build();
    }
}
